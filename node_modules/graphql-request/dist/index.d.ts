export declare class GraphQLClient {
    private url;
    private options;
    constructor(url: string, options?: Partial<RequestInit>);
    rawRequest<T = any, V = object>(query: string, variables?: V): Promise<{
        data?: T;
        extensions?: any;
        headers: Headers;
        status: number;
        errors?: GraphQLError[];
    }>;
    request<T = any, V = object>(query: string, variables?: V): Promise<T>;
    setHeaders(headers: HeadersInit): this;
    setHeader(key: string, value: string): this;
}

export declare class GraphQLError extends Error {
    response: GraphQLResponse;
    request: GraphQLRequest;
    constructor(response: GraphQLResponse, request: GraphQLRequest);
}

export interface GraphQLRequest {
    query: string;
    variables?: object;
}

export interface GraphQLResponse {
    data?: object;
    errors?: GraphQLError[];
    status: number;
    [key: string]: any;
}

export declare function rawRequest<T = any, V = object>(url: string, query: string, variables?: V): Promise<{
    data?: T;
    extensions?: any;
    headers: Headers;
    status: number;
    errors?: GraphQLError[];
}>;

export declare function request<T = any, V = object>(url: string, query: string, variables?: V): Promise<T>;

export declare function getSdk(client: GraphQLClient, withWrapper?: boolean): any;

export declare function stringifyVariables(variables: object): string;

export declare function createRequest(q: string, vars?: object): {
    query: string;
    variables: object;
};